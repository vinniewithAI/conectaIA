# -*- coding: utf-8 -*-
"""Teste-Conecta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Khds0wsdR77B7XFzUV5yKM5OxdEKjhsB
"""

# -*- coding: utf-8 -*-
"""app.py"""

import streamlit as st
import os  # Adicionado para usar os.remove
from chatbot import QASystem, ProcessamentoDeDocumento
from crud import autenticar_usuario, criar_pessoa, listar_pessoas, buscar_por_id, atualizar_pessoa, deletar_pessoa, atualizar_senha, validar_forca_senha, armazenar_token, cadastrar_ecommerce, listar_ecommerces, buscar_ecommerce_por_id, atualizar_ecommerce, deletar_ecommerce

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Chatbot Conecta", page_icon="ü§ñ")

# Inicializar o chatbot e o processador
if "qa_system" not in st.session_state:
    st.session_state.qa_system = QASystem()
if "processor" not in st.session_state:
    st.session_state.processor = ProcessamentoDeDocumento()

# Abas
tab1, tab2, tab3, tab4 = st.tabs(["Chatbot", "Gerenciar Usu√°rios", "Gerenciar E-commerce", "Configura√ß√µes"])

# 1. Chatbot
with tab1:
    # Verificar login
    if "user_id" not in st.session_state:
        st.title("Login")
        email = st.text_input("Email", key="login_email")
        password = st.text_input("Senha", type="password", key="login_password")

        if st.button("Entrar"):
            user = autenticar_usuario(email, password)
            if user:
                st.session_state.user_id = str(user["_id"])
                st.session_state.user_name = user["nome"]
                st.success("Login bem-sucedido!")
                st.rerun()
            else:
                st.error("Email ou senha incorretos.")

        st.subheader("Registrar")
        nome = st.text_input("Nome", key="reg_nome")
        email_reg = st.text_input("Email (para registro)", key="reg_email")
        senha_reg = st.text_input("Senha (para registro)", type="password", key="reg_senha")
        if st.button("Registrar"):
            if not validar_forca_senha(senha_reg):
                st.error("A senha deve ter pelo menos 8 caracteres, uma letra mai√∫scula e um n√∫mero.")
            else:
                user_id = criar_pessoa(nome, email_reg, senha_reg)
                if user_id:
                    st.success("Usu√°rio registrado com sucesso! Fa√ßa login.")
                else:
                    st.error("Erro ao registrar usu√°rio.")
    else:
        st.title(f"Chatbot Conecta ü§ñ - Bem-vindo, {st.session_state.user_name}")

        # Upload de PDF
        uploaded_file = st.file_uploader("Carregue um PDF para an√°lise", type=["pdf"])
        if uploaded_file and st.button("Processar PDF"):
            with open("temp.pdf", "wb") as f:
                f.write(uploaded_file.getbuffer())
            doc_id = st.session_state.processor.process_pdf("temp.pdf", st.session_state.user_id)
            if doc_id:
                st.success(f"PDF processado com sucesso! ID: {doc_id}")
            else:
                st.error("Erro ao processar o PDF.")
            os.remove("temp.pdf")  # Agora funciona com a importa√ß√£o do os

        # Hist√≥rico de mensagens
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Exibe mensagens anteriores
        for msg in st.session_state.messages:
            st.chat_message(msg["role"]).write(msg["content"])
            if "sources" in msg:
                st.write("**Fontes:**", ", ".join(msg["sources"]))

        # Input do usu√°rio
        user_input = st.chat_input("Pergunte algo sobre marketplaces...")
        if user_input:
            st.session_state.messages.append({"role": "user", "content": user_input})
            st.chat_message("user").write(user_input)

            resposta = st.session_state.qa_system.ask_question(user_input, st.session_state.user_id)
            if resposta:
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": resposta["resposta"],
                    "sources": resposta["fontes"]
                })
                st.chat_message("assistant").write(resposta["resposta"])
                st.write("**Fontes:**", ", ".join(resposta["fontes"]))

                # Armazenar a conversa no MongoDB
                messages = [
                    {"role": "user", "content": user_input},
                    {"role": "assistant", "content": resposta["resposta"]}
                ]
                armazenar_token(st.session_state.user_id, messages)
            else:
                st.error("Erro ao obter resposta.")

# 2. Gerenciar Usu√°rios
with tab2:
    if "user_id" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta se√ß√£o.")
    else:
        st.title("Gerenciar Usu√°rios")
        users = listar_pessoas()
        if users:
            for user in users:
                st.write(f"ID: {user['_id']}, Nome: {user['nome']}, Email: {user['email']}")

        st.subheader("Atualizar Usu√°rio")
        user_id_to_update = st.text_input("ID do Usu√°rio para Atualizar")
        novo_nome = st.text_input("Novo Nome")
        if st.button("Atualizar Usu√°rio"):
            if atualizar_pessoa(user_id_to_update, novo_nome):
                st.success("Usu√°rio atualizado com sucesso!")
            else:
                st.error("Erro ao atualizar usu√°rio.")

        st.subheader("Deletar Usu√°rio")
        user_id_to_delete = st.text_input("ID do Usu√°rio para Deletar")
        if st.button("Deletar Usu√°rio"):
            if user_id_to_delete == st.session_state.user_id:
                st.error("Voc√™ n√£o pode deletar seu pr√≥prio usu√°rio enquanto estiver logado!")
            elif deletar_pessoa(user_id_to_delete):
                st.success("Usu√°rio deletado com sucesso!")
            else:
                st.error("Erro ao deletar usu√°rio.")

# 3. Gerenciar E-commerce
with tab3:
    if "user_id" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta se√ß√£o.")
    else:
        st.title("Gerenciar E-commerce")

        st.subheader("Cadastrar E-commerce")
        nome = st.text_input("Nome do E-commerce")
        categoria = st.text_input("Categoria")
        descricao = st.text_area("Descri√ß√£o")
        faixa_preco = st.text_input("Faixa de Pre√ßo (n√∫mero)")
        url = st.text_input("URL")
        plano = st.text_input("Plano")
        pros = st.text_input("Pr√≥s (separados por v√≠rgula)")
        contras = st.text_input("Contras (separados por v√≠rgula)")
        if st.button("Cadastrar E-commerce"):
            try:
                faixa_preco_int = int(faixa_preco) if faixa_preco else 0
                if cadastrar_ecommerce(nome, categoria, descricao, faixa_preco, url, plano, pros, contras):
                    st.success("E-commerce cadastrado com sucesso!")
                else:
                    st.error("Erro ao cadastrar e-commerce.")
            except ValueError:
                st.error("Faixa de pre√ßo deve ser um n√∫mero.")

        st.subheader("Listar E-commerces")
        if st.button("Listar E-commerces"):
            ecommerces = listar_ecommerces()
            if ecommerces:
                for ecom in ecommerces:
                    st.write(f"ID: {ecom['_id']}, Nome: {ecom['name']}, Categoria: {ecom['category']}, Descri√ß√£o: {ecom['description']}, Pre√ßo: {ecom.get('faixa-preco', 'N√£o informado')}, URL: {ecom.get('url', 'N√£o informada')}, Plano: {ecom.get('plano', 'N√£o informado')}, Pr√≥s: {', '.join(ecom.get('pros', []))}, Contras: {', '.join(ecom.get('contras', []))}")
            else:
                st.write("Nenhum e-commerce encontrado.")

        st.subheader("Atualizar E-commerce")
        ecom_id = st.text_input("ID do E-commerce para Atualizar")
        ecom_nome = st.text_input("Novo Nome", key="ecom_nome")
        ecom_categoria = st.text_input("Nova Categoria")
        ecom_descricao = st.text_area("Nova Descri√ß√£o")
        if st.button("Atualizar E-commerce"):
            updates = {}
            if ecom_nome:
                updates["name"] = ecom_nome
            if ecom_categoria:
                updates["category"] = ecom_categoria
            if ecom_descricao:
                updates["description"] = ecom_descricao
            if updates and atualizar_ecommerce(ecom_id, updates):
                st.success("E-commerce atualizado com sucesso!")
            else:
                st.error("Erro ao atualizar e-commerce.")

        st.subheader("Deletar E-commerce")
        ecom_id_delete = st.text_input("ID do E-commerce para Deletar")
        if st.button("Deletar E-commerce"):
            if deletar_ecommerce(ecom_id_delete):
                st.success("E-commerce deletado com sucesso!")
            else:
                st.error("Erro ao deletar e-commerce.")

# 4. Configura√ß√µes
with tab4:
    if "user_id" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta se√ß√£o.")
    else:
        st.title("Configura√ß√µes")
        st.subheader("Alterar Senha")
        email = st.text_input("Seu Email", key="change_email")
        senha_atual = st.text_input("Senha Atual", type="password")
        nova_senha = st.text_input("Nova Senha", type="password")
        if st.button("Alterar Senha"):
            if not validar_forca_senha(nova_senha):
                st.error("A nova senha deve ter pelo menos 8 caracteres, uma letra mai√∫scula e um n√∫mero.")
            elif atualizar_senha(email, senha_atual, nova_senha):
                st.success("Senha alterada com sucesso!")
            else:
                st.error("Erro ao alterar senha. Verifique suas credenciais.")

        if st.button("Sair"):
            st.session_state.clear()
            st.success("Voc√™ saiu da sua conta.")
            st.rerun()