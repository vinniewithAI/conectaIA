{
 "nbformat": 4,
 "nbformat_minor": 0,
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "install pymongo\n",
    "install langchain_openai # ou a lib do seu LLM preferido\n",
    "\n",
    "import os\n",
    "import pymongo\n",
    "from langchain_openai import ChatOpenAI\n",
    "from langchain_core.messages import HumanMessage\n",
    "import tiktoken # Necessário para obter tokens brutos do OpenAI\n",
    "\n",
    "# --- Configuração da Chave da API (Exemplo com OpenAI) ---\n",
    "# **ATENÇÃO:** Nunca coloque chaves de API diretamente no código em produção.\n",
    "# Use variáveis de ambiente (recomendado) ou um arquivo .env.\n",
    "# Ex: export OPENAI_API_KEY=\"SUA_CHAVE_AQUI\" no terminal antes de rodar.\n",
    "# Para este exemplo, estamos colocando diretamente para simplicidade, mas evite em produção.\n",
    "os.environ[\"OPENAI_API_KEY\"] = \"SUA_CHAVE_API_OPENAI_AQUI\" # Substitua pela sua chave real\n",
    "\n",
    "# --- Configuração do MongoDB ---\n",
    "MONGO_URI = \"mongodb://localhost:27017/\"\n",
    "DB_NAME = \"llm_tokens_db\"\n",
    "COLLECTION_NAME = \"token_usage\"\n",
    "\n",
    "def store_token_usage_in_mongodb(text, token_count, llm_model_name, collection, raw_tokens=None):\n",
    "    \"\"\"\n",
    "    Armazena os dados de tokenização no MongoDB.\n",
    "\n",
    "    Args:\n",
    "        text (str): O texto original que foi tokenizado.\n",
    "        token_count (int): O número de tokens.\n",
    "        llm_model_name (str): O nome do modelo LLM usado para tokenizar.\n",
    "        collection (pymongo.collection.Collection): A coleção MongoDB para inserir os dados.\n",
    "        raw_tokens (list, optional): A lista de tokens brutos (se disponível). Defaults to None.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        document = {\n",
    "            \"original_text\": text,\n",
    "            \"token_count\": token_count,\n",
    "            \"llm_model\": llm_model_name,\n",
    "            \"timestamp\": pymongo.datetime.datetime.now(), # Adiciona um timestamp para rastreamento\n",
    "        }\n",
    "        if raw_tokens:\n",
    "            document[\"raw_tokens\"] = raw_tokens\n",
    "\n",
    "        result = collection.insert_one(document)\n",
    "        print(f\"Dados de token inseridos no MongoDB com ID: {result.inserted_id}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Erro ao armazenar dados no MongoDB: {e}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Inicializar o modelo de LLM.\n",
    "    llm = ChatOpenAI(model=\"gpt-3.5-turbo\", temperature=0)\n",
    "\n",
    "    # Texto de exemplo para tokenização\n",
    "    text_to_tokenize = \"O Langchain é um framework poderoso para construir aplicações com modelos de linguagem grandes.\"\n",
    "\n",
    "    # --- 1. Contar tokens com Langchain ---\n",
    "    token_count = llm.get_num_tokens(text_to_tokenize)\n",
    "    print(f\"Número de tokens para o texto: {token_count}\")\n",
    "\n",
    "    # --- 2. Obter tokens brutos (específico para OpenAI/tiktoken) ---\n",
    "    decoded_tokens = None\n",
    "    try:\n",
    "        encoding = tiktoken.encoding_for_model(llm.model_name)\n",
    "        raw_token_ids = encoding.encode(text_to_tokenize)\n",
    "        decoded_tokens = [encoding.decode_single_token_bytes(t).decode('utf-8', errors='ignore') for t in raw_token_ids]\n",
    "        print(f\"Tokens decodificados (tiktoken): {decoded_tokens}\")\n",
    "    except ImportError:\n",
    "        print(\"tiktoken não está instalado. Não é possível obter tokens brutos para modelos OpenAI.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Erro ao obter tokens brutos com tiktoken: {e}\")\n",
    "\n",
    "    # --- 3. Conectar ao MongoDB e Armazenar ---\n",
    "    client = None # Inicializa client como None\n",
    "    try:\n",
    "        client = pymongo.MongoClient(MONGO_URI)\n",
    "        db = client[DB_NAME]\n",
    "        token_collection = db[COLLECTION_NAME]\n",
    "        print(\"Conexão com MongoDB estabelecida com sucesso.\")\n",
    "\n",
    "        store_token_usage_in_mongodb(\n",
    "            text=text_to_tokenize,\n",
    "            token_count=token_count,\n",
    "            llm_model_name=llm.model_name,\n",
    "            collection=token_collection,\n",
    "            raw_tokens=decoded_tokens # Opcional: passa os tokens brutos se disponíveis\n",
    "        )\n",
    "\n",
    "    except pymongo.errors.ConnectionFailure as e:\n",
    "        print(f\"Erro de conexão com o MongoDB: {e}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Ocorreu um erro geral: {e}\")\n",
    "    finally:\n",
    "        if client: # Verifica se o cliente foi inicializado antes de fechar\n",
    "            client.close()\n",
    "            print(\"Conexão com MongoDB fechada.\")"
   ]
  }
 ]
}
