# -*- coding: utf-8 -*-
"""CRUD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZycjHqGDGyoVpHj_5fBTsfK-3k_DIWv9

#1. Imports
"""

!pip install pymongo
from pymongo import MongoClient
from google.colab import userdata
import datetime
from bson import ObjectId

!pip install bcrypt
import bcrypt

import re

"""#1.1 Conectar"""

def conecta_user():
  STRING = "mongodb+srv://conecta-ia:O1r3VIK4X35CzEfL@conecta-cluster.hgjlsdc.mongodb.net/"
  try:
    client = MongoClient(STRING)
    db = client["conecta"]
    return db["user"]
  except Exception as e:
    print(f"Erro ao conectar ao MongoDB: {e}")
    return None

def conecta_token():
  STRING = "mongodb+srv://conecta-ia:O1r3VIK4X35CzEfL@conecta-cluster.hgjlsdc.mongodb.net/"
  try:
    client = MongoClient(STRING)
    db = client["conecta"]
    return db["token"]
  except Exception as e:
    print(f"Erro ao conectar ao MongoDB: {e}")
    return None

def conecta_ecommerce():
  STRING = "mongodb+srv://conecta-ia:O1r3VIK4X35CzEfL@conecta-cluster.hgjlsdc.mongodb.net/"
  try:
    client = MongoClient(STRING)
    db = client["conecta"]
    return db["ecommerce"]
  except Exception as e:
    print(f"Erro ao conectar ao MongoDB: {e}")
    return None

"""#2. Pessoas

##2.1 Usu√°rio
"""

def cadastrar_pessoa(nome: str, telefone: str, email: str, data_nascimento,  senha_plana: str):
    colecao = conecta_user()

    try:
        # Validar formato do email
        email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_regex, email):
            print(f"‚ùå Email inv√°lido: {email}")
            return None

        # Verificar se o email j√° est√° registrado
        if colecao.find_one({"email": email}):
            print(f"‚ùå Email j√° registrado: {email}")
            return None

        # Gerar hash da senha
        senha_hash = gerar_hash_senha(senha_plana)
        if not senha_hash:
            print("‚ùå Falha ao gerar hash da senha")
            return None

        # Criar documento do usu√°rio
        pessoa = {
            "nome": nome,
            "telefone": telefone,
            "email": email,
            "data_nascimento": data_nascimento,
            "senha": senha_hash,
            "created_at": datetime.datetime.utcnow(),
            "updated_at": datetime.datetime.utcnow()
        }

        # Inserir no banco de dados
        resultado = colecao.insert_one(pessoa)
        print(f"‚úÖ Usu√°rio criado com id: {resultado.inserted_id}")
        return resultado.inserted_id

    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio: {e}")
        return None

def autenticar_usuario(email: str, senha_plana: str) -> dict:

    colecao_pessoas = conecta_user()

    try:
        # Buscar usu√°rio pelo email
        usuario = colecao_pessoas.find_one({"email": email})
        if not usuario:
            print("‚ùå Usu√°rio n√£o encontrado")
            return None

        # Verificar senha
        if verificar_senha(senha_plana, usuario["senha"]):
            print("‚úÖ Autentica√ß√£o bem-sucedida!")
            return usuario
        else:
            print("‚ùå Senha incorreta")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao autenticar usu√°rio: {e}")
        return None


def listar_pessoas():

  colecao = conecta_user()

  try:
    print("\nPessoas:")
    for pessoa in colecao.find().sort("id"):
      print("id: "+str(pessoa['_id'])+" nome: "+pessoa['nome'])
    return True
  except Exception as e:
    print(f"‚ùå Erro ao listar pessoas: {e}")
    return False


def buscar_pessoa(id):

  colecao = conecta_user()
  obj_id = ObjectId(id)

  try:
    pessoa = colecao.find_one({"_id": obj_id})
    if (pessoa):
      print("ID encontrado")
      print("\nüîç Pessoa encontrada:")
      print(f"ID: {pessoa['_id']}")
      print(f"Nome: {pessoa['nome']}")
      print(f"Telefone: {pessoa['telefone']}")
      print(f"E-mail: {pessoa['email']}")
      print(f"Data de nascimento: {pessoa['data_nascimento']}")
      print(f"Criado em: {pessoa['created_at']}")
      print(f"Atualizado em: {pessoa['updated_at']}")
      return pessoa
    else:
      print("‚ùå Nenhuma pessoa com esse id")
      return None
  except:
    print("‚ùå Erro ao buscar pessoa")
    return None

def deletar_pessoa(id):

  colecao = conecta_user()
  obj_id = ObjectId(id)

  try:
    resultado = colecao.delete_one({"_id": obj_id})
    if resultado.deleted_count > 0:
      print(f"‚úÖ Pessoa com id {id} removida com sucesso!")
      return True
    else:
      print(f"‚ùå Nenhuma pessoa encontrada com id {id}")
      return False
  except Exception as e:
    print(f"‚ùå Erro ao deletar pessoa: {e}")
    return False

"""##2.2 Senha:"""

def atualizar_senha(email: str, senha_atual: str, nova_senha: str) -> bool:

    colecao = conecta_user()

    try:
        # Primeiro autentica o usu√°rio
        usuario = autenticar_usuario(email, senha_atual)
        if not usuario:
            return False

        # Gera novo hash
        novo_hash = gerar_hash_senha(nova_senha)
        if not novo_hash:
            return False

        # Atualiza no banco de dados
        resultado = colecao.update_one(
            {"_id": usuario["_id"]},
            {"$set": {
                "senha": novo_hash,
                "updated_at": datetime.datetime.utcnow()
            }}
        )

        return resultado.modified_count > 0

    except Exception as e:
        print(f"Erro ao atualizar senha: {e}")
        return False

def validar_forca_senha(senha: str) -> bool:
    if len(senha) < 8:
        print("A senha deve ter pelo menos 8 caracteres")
        return False
    if not any(c.isupper() for c in senha):
        print("A senha deve conter pelo menos uma letra mai√∫scula")
        return False
    if not any(c.isdigit() for c in senha):
        print("A senha deve conter pelo menos um n√∫mero")
        return False
    return True

def gerar_hash_senha(senha_plana: str) -> str:
    try:
        # Gera um salt aleat√≥rio
        salt = bcrypt.gensalt(rounds=12)  # rounds define o custo computacional (padr√£o √© 12)

        # Cria o hash da senha
        hash_senha = bcrypt.hashpw(senha_plana.encode('utf-8'), salt)

        return hash_senha.decode('utf-8')  # Converte bytes para string

    except Exception as e:
        print(f"‚ùå Erro ao gerar hash da senha: {e}")
        return None

def verificar_senha(senha_plana: str, hash_armazenado: str) -> bool:
    try:
        # Converte a string hash de volta para bytes
        hash_bytes = hash_armazenado.encode('utf-8')

        # Verifica a correspond√™ncia
        return bcrypt.checkpw(senha_plana.encode('utf-8'), hash_bytes)

    except Exception as e:
        print(f"‚ùå Erro ao verificar senha: {e}")
        return False

"""#3. E-commerce"""

def cadastrar_ecommerce(nome: str, categoria: str, descricao: str, faixa_preco: int, url: str, plano: str, pros: str, contras: str):

    colecao = conecta_ecommerce()

    try:
        # Coletar dados do e-commerce
        print("\n--- Cadastro de E-commerce ---")
        ecommerce = {
            "_id": ObjectId(),  # Gerar um ObjectId automaticamente
            "nome": nome,
            "categoria": categoria,
            "descricao": descricao,
            "faixa-preco": faixa_preco,
            "url": url,
            "plano": plano,
            "pros": pros,
            "contras": contras,
            "created_at": datetime.datetime.utcnow(),
            "updated_at": datetime.datetime.utcnow()
        }

        # Inserir no banco de dados
        resultado = colecao.insert_one(ecommerce)
        print(f"\n‚úÖ E-commerce cadastrado com ID: {resultado.inserted_id}")

        return resultado.inserted_id

    except Exception as e:
        print(f"‚ùå Erro ao cadastrar e-commerce: {e}")
        return None


def listar_ecommerces():

    colecao = conecta_ecommerce()

    try:
        print("\n--- E-commerces Cadastrados ---")
        for ecom in colecao.find().sort("nome"):
            print(f"\nID: {ecom['_id']}")
            print(f"\nNome: {ecom['nome']}")
            print(f"Categoria: {ecom['categoria']}")
            print(f"Descri√ß√£o: {ecom['descricao']}")
            print(f"Pre√ßo: {ecom.get('faixa-preco', 'N√£o informado')}")
            print(f"URL: {ecom.get('url', 'N√£o informada')}")
            print(f"Plano: {ecom.get('plano', 'N√£o informado')}")
            print(f"Pros: {', '.join(ecom.get('pros', []))}")
            print(f"Contras: {', '.join(ecom.get('contras', []))}")
            print(f"Criado em: {ecom['created_at']}")
            print(f"Atualizado em: {ecom['updated_at']}")

        return True

    except Exception as e:
        print(f"‚ùå Erro ao listar e-commerces: {e}")
        return False

def buscar_ecommerce_por_id(id):

    colecao = conecta_ecommerce()

    try:
        obj_id = ObjectId(id)

        ecommerce = colecao.find_one({"_id": obj_id})

        if ecommerce:
            print("\nüîç E-commerce encontrado:")
            print(f"ID: {ecommerce['_id']}")
            print(f"Nome: {ecommerce['nome']}")
            print(f"Categoria: {ecommerce['categoria']}")
            print(f"Descri√ß√£o: {ecommerce['descricao']}")
            print(f"Faixa de pre√ßo: {ecommerce.get('faixa-preco', 'N√£o informado')}")
            print(f"URL: {ecommerce.get('url', 'N√£o informada')}")
            print(f"Plano: {ecommerce.get('plano', 'N√£o informado')}")
            print(f"Pros: {', '.join(ecommerce.get('pros', []))}")
            print(f"Contras: {', '.join(ecommerce.get('contras', []))}")
            print(f"Atualizado em: {ecommerce['updated_at']}")
            return ecommerce
        else:
            print("‚ùå Nenhum e-commerce encontrado com este id")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao buscar e-commerce: {e}")
        return None

def atualizar_ecommerce(id):

    colecao = conecta_ecommerce()

    try:
        obj_id = ObjectId(id)
        ecommerce = colecao.find_one({"_id": obj_id})

        if not ecommerce:
            print("‚ùå E-commerce n√£o encontrado")
            return False

        # Mostrar dados atuais
        print("\nDados atuais:")
        print(f"1. Nome: {ecommerce['nome']}")
        print(f"2. Categoria: {ecommerce['categoria']}")
        print(f"3. Descri√ß√£o: {ecommerce['descricao']}")
        print(f"4. Faixa de pre√ßo: {ecommerce.get('faixa-preco', 'N√£o informado')}")
        print(f"5. URL: {ecommerce.get('url', 'N√£o informada')}")
        print(f"6. Plano: {ecommerce.get('plano', 'N√£o informado')}")
        print(f"7. Pros: {', '.join(ecommerce.get('pros', []))}")
        print(f"8. Contras: {', '.join(ecommerce.get('contras', []))}")


        # Coletar novos dados
        updates = {}
        campos = {
            '1': 'nome',
            '2': 'categoria',
            '3': 'descri√ß√£o',
            '4': 'faixa-preco',
            '5': 'url',
            '6': 'plano',
            '7': 'pros',
            '8': 'contras'
        }

        print("\nDigite os n√∫meros dos campos que deseja atualizar (separados por v√≠rgula):")
        campos_para_atualizar = input("Campos: ").split(',')

        for campo_num in campos_para_atualizar:
            campo_num = campo_num.strip()
            if campo_num in campos:
                if campo_num == '7':  # Pros √© uma lista
                    updates[campos[campo_num]] = input(f"Novos pros (separadas por v√≠rgula): ").split(',')
                elif campo_num == '8':  # Contras √© uma lista
                    updates[campos[campo_num]] = input(f"Novos contras (separadas por v√≠rgula): ").split(',')
                else:
                    updates[campos[campo_num]] = input(f"Novo {campos[campo_num]}: ")

        if updates:
            updates['updated_at'] = datetime.datetime.utcnow()
            resultado = colecao.update_one(
                {"_id": obj_id},
                {"$set": updates}
            )

            if resultado.modified_count > 0:
                print("‚úÖ E-commerce atualizado com sucesso!")
                return True
            else:
                print("‚ö†Ô∏è Nenhum dado foi modificado")
                return False
        else:
            print("‚ö†Ô∏è Nenhum campo selecionado para atualiza√ß√£o")
            return False

    except Exception as e:
        print(f"‚ùå Erro ao atualizar e-commerce: {e}")
        return False


def deletar_ecommerce(id):

    colecao = conecta_ecommerce()

    try:
        obj_id = ObjectId(id)

        # Confirma√ß√£o antes de deletar
        confirmacao = input(f"Tem certeza que deseja deletar o e-commerce {id}? (s/n): ")
        if confirmacao.lower() != 's':
            print("‚ùå Opera√ß√£o cancelada")
            return False

        resultado = colecao.delete_one({"_id": obj_id})

        if resultado.deleted_count > 0:
            print("‚úÖ E-commerce removido com sucesso!")
            return True
        else:
            print("‚ùå Nenhum e-commerce encontrado com este ID")
            return False

    except Exception as e:
        print(f"‚ùå Erro ao deletar e-commerce: {e}")
        return False

"""#4. Token"""

def armazenar_token(user_id, messages):
    try:
        colecao_tokens = conecta_token()
        if colecao_tokens is None:
            return None

        token_data = {
            "user_id": user_id,
            "messages": messages, #Lista de dicion√°rios com as mensagens no formato: [{"role": "user/bot", "content": "texto da mensagem"}, ...]
            "updated_at": datetime.datetime.utcnow()  # ISODate autom√°tico
        }

        resultado = colecao_tokens.insert_one(token_data)
        print(f"Token armazenado com ID: {resultado.inserted_id}")
        return resultado.inserted_id #ObjectId do documento inserido ou None em caso de erro
    except Exception as e:
        print(f"‚ùå Erro ao armazenar token: {e}")
        return None

def buscar_tokens_por_usuario(user_id):
    try:
        colecao_tokens = conecta_token()
        if colecao_tokens is None:
            return None

        tokens = list(colecao_tokens.find({"user_id": user_id}).sort("updated_at", -1))
        if tokens:
          print(f"Tokens encontrados: {tokens}")
        else:
          print("Nenhum token encontrado")
        return tokens  #Lista de tokens ou None em caso de erro
    except Exception as e:
        print(f"‚ùå Erro ao buscar tokens: {e}")
        return None

"""#5. Menu:"""

def menu():
    while True:
        print("\n--- MENU PRINCIPAL ---")
        print("1. Gerenciar Pessoas")
        print("2. Gerenciar E-commerces")
        print("3. Gerenciar Tokens")
        print("0. Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            menu_pessoas()
        elif opcao == "2":
            menu_ecommerces()
        elif opcao == "3":
            menu_tokens()
        elif opcao == "0":
            print("Saindo do sistema...")
            break
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def menu_pessoas():
    while True:
        print("\n--- GERENCIAR PESSOAS ---")
        print("1. Cadastrar nova pessoa")
        print("2. Login")
        print("3. Listar todas as pessoas")
        print("4. Buscar pessoa")
        print("5. Alterar senha")
        print("6. Deletar pessoa")
        print("0. Voltar")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            nome = input("Nome completo: ")
            telefone = input("Telefone: ")
            email = input("Email: ")
            data_nascimento = input("Data de nascimento (YYYY-MM-DD): ")
            while True:
                senha = input("Senha: ")
                if validar_forca_senha(senha):
                    break
                print("Por favor, crie uma senha mais forte.")
            cadastrar_pessoa(nome, telefone, email, data_nascimento, senha)

        elif opcao == "2":
            email = input("Email: ")
            senha = input("Senha: ")
            usuario = autenticar_usuario(email, senha)
            if usuario:
                print(f"Bem-vindo, {usuario['nome']}!")

        elif opcao == "3":
            listar_pessoas()

        elif opcao == "4":
            id = input("Digite o id para buscar: ")
            buscar_pessoa(id)

        elif opcao == "5":
            email = input("Email: ")
            senha_atual = input("Senha atual: ")
            nova_senha = input("Nova senha: ")
            if validar_forca_senha(nova_senha):
                if atualizar_senha(email, senha_atual, nova_senha):
                    print("Senha atualizada com sucesso!")
                else:
                    print("Falha ao atualizar senha. Verifique suas credenciais.")

        elif opcao == "6":
            id = (input("Digite o id da pessoa a deletar: "))
            deletar_pessoa(id)

        elif opcao == "0":
            break

        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def menu_ecommerces():
    while True:
        print("\n--- GERENCIAR E-COMMERCES ---")
        print("1. Cadastrar novo e-commerce")
        print("2. Listar todos e-commerces")
        print("3. Buscar e-commerce")
        print("4. Atualizar e-commerce")
        print("5. Deletar e-commerce")
        print("0. Voltar")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
          nome = input("Digite o nome do e-commerce: ")
          categoria = input("Digite a categoria do e-commerce: ")
          descricao = input("Digite a descri√ß√£o do e-commerce: ")
          faixa_preco = input("Digite a faixa de pre√ßo do e-commerce: ")
          url = input("Digite a URL do e-commerce: ")
          plano = input("Digite o plano do e-commerce: ")
          pros = input("Digite os pros do e-commerce (separados por v√≠rgula): ").split(',')
          contras = input("Digite os contras do e-commerce (separados por v√≠rgula): ").split(',')
          cadastrar_ecommerce(nome, categoria, descricao, faixa_preco, url, plano, pros, contras)

        elif opcao == "2":
            listar_ecommerces()

        elif opcao == "3":
            id = input("Digite o ID do e-commerce: ")
            buscar_ecommerce_por_id(id)

        elif opcao == "4":
            id = input("Digite o ID do e-commerce: ")
            atualizar_ecommerce(id)

        elif opcao == "5":
            id = input("Digite o ID do e-commerce: ")
            deletar_ecommerce(id)

        elif opcao == "0":
            break

        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def menu_tokens():
    while True:
        print("\n--- GERENCIAR TOKENS ---")
        print("1. Armazenar token")
        print("2. Buscar tokens por usu√°rio")
        print("0. Voltar")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            id = input("Digite o ID do usu√°rio: ")
            token = input("Digite o token: ")
            armazenar_token(id, token)

        elif opcao == "2":
            id = input("Digite o ID do usu√°rio: ")
            buscar_tokens_por_usuario(id)

        elif opcao == "0":
            break

        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

"""#Main"""

menu()